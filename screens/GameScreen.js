import React, { useState, useRef, useEffect } from 'react';
import {
 View,
 StyleSheet,
 Alert,
 ScrollView
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import NumberContainer from '../components/NumberContainer';
import Card from '../components/Card';
import BodyText from '../components/BodyText';
import MainButton from '../components/MainButton';
import Colors from '../constants/colors';

const generateRandomBetween = (min, max, exclude) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    const randomNumber = Math.floor(Math.random() * (max - min)) + min;
    if (randomNumber === exclude) {
        return generateRandomBetween(min, max, exclude);
    }
    return randomNumber;
};

const renderListItem = (value, numofRound) => (
        <View key={value} style={styles.listItemStyle}>
            <BodyText>
                #
                {numofRound}
            </BodyText>
            <BodyText>{value}</BodyText>
        </View>
    );

const GameScreen = (props) => {
    const { userChoice, onGameOver } = props;

    const initialGuess = generateRandomBetween(1, 100, userChoice);

    const [currentGuess, setCurrentGuess] = useState(initialGuess);
    const [pastGuesses, setPastGuesses] = useState([initialGuess]);

     /* The difference to store in ref than state is that component doesn't re-initialize
        on each re-render but will retain value that we have changes of it elsewhere
        eg. somewhere down below when we change its value  */
    // useRef allows to define value which survives component re-render
    const currentLow = useRef(1);
    // useRef allows to define value which survives component re-render
    const currentHigh = useRef(100);

    useEffect(() => {
        if (currentGuess === userChoice) {
            onGameOver(pastGuesses.length);
        }
    }, [currentGuess, userChoice, onGameOver]);
    // above:notified as dependencies so that useEffect only re-run,
    // when there is change in either of these values

    const nextGuessHandler = (direction) => {
        if (
            (direction === 'lower' && currentGuess < userChoice)
        || (direction === 'greater' && currentGuess > userChoice)) {
            Alert.alert('Don\' Lie!!', 'You know that this is wrong...', [{ text: 'Sorry', style: 'cancel' }]);
            return;
        }
        if (direction === 'lower') {
            /* The difference to store in ref than state
            is that component doesn't re-render when we change value */
            // references generated by useRef are objects
            // with current property which stores actual value
            currentHigh.current = currentGuess;
        } else {
            // references generated by useRef are objects with
            // current property which stores actual value
            currentLow.current = currentGuess + 1;
        }
        const nextNumber = generateRandomBetween(
            currentLow.current,
            currentHigh.current,
            currentGuess
        );
        setCurrentGuess(nextNumber);
        // Adding past guesses to front of list so that recent one always show on top
        setPastGuesses((curPastGuesses) => [nextNumber, ...curPastGuesses]);
    };

    return (
        <View style={styles.screenStyle}>
            <BodyText>Opponent's Guess</BodyText>
            <NumberContainer>{currentGuess}</NumberContainer>
            <Card style={styles.cardStyle}>
                <View style={styles.buttonStyle}>
                   <MainButton onPress={nextGuessHandler.bind(this, 'lower')}>
                        <Ionicons name="md-remove" size={24} color="white" />
                   </MainButton>
                </View>
                <View style={styles.buttonStyle}>
                   <MainButton onPress={nextGuessHandler.bind(this, 'greater')}>
                        <Ionicons name="md-add" size={24} color="white" />
                   </MainButton>
                </View>
            </Card>
            {/* To control the list items style in Scroll View,
            we need to add it to encapsulating view,
            rather than to ScrollView or its list item */}
            <View style={styles.listContainerStyle}>
                {/* To add styles to ScrollView we cannot directly use styles but we
                must use ContentContainerStyle prop, same for flatList */}
                <ScrollView contentContainerStyle={styles.listStyle}>
                    {pastGuesses.map(
                        (guess, index) => renderListItem(guess, pastGuesses.length - index)
                    )}
                </ScrollView>
            </View>
        </View>
    );
};

const styles = StyleSheet.create({
    screenStyle: {
        flex: 1,
        padding: 10,
        alignItems: 'center'
    },
    cardStyle: {
        flexDirection: 'row',
        width: 300,
        maxWidth: '80%',
        justifyContent: 'space-around',
        marginTop: 20
    },
    buttonStyle: {
        textAlign: 'center'
    },
    listContainerStyle: {
        flex: 1,
        width: '80%'
    },
    listStyle: {
        /* The flex-grow property specifies how much the item will grow
        relative to the rest of the flexible items inside the same container.
        Note: If the element is not a flexible item, the flex-grow property
        has no effect.
        Using only flex=1, when leaving scrolling, last/first item won't be visible,
        it will jump back */
        flexGrow: 1, // same as flex, but more flexible, best for scroll view
        justifyContent: 'flex-end'
    },
    listItemStyle: {
        borderColor: Colors.primary,
        borderWidth: 2,
        marginVertical: 10,
        paddingVertical: 10,
        paddingHorizontal: 20,
        backgroundColor: 'white',
        flexDirection: 'row',
        justifyContent: 'space-between'
    }
});

export default GameScreen;
